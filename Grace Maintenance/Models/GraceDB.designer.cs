#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Grace
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Grace")]
	public partial class db : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttendance(Grace.Models.Attendance instance);
    partial void UpdateAttendance(Grace.Models.Attendance instance);
    partial void DeleteAttendance(Grace.Models.Attendance instance);
    partial void InsertState(Grace.Models.State instance);
    partial void UpdateState(Grace.Models.State instance);
    partial void DeleteState(Grace.Models.State instance);
    partial void InsertChurch(Grace.Models.Church instance);
    partial void UpdateChurch(Grace.Models.Church instance);
    partial void DeleteChurch(Grace.Models.Church instance);
    partial void InsertChurchAddress(Grace.Models.ChurchAddress instance);
    partial void UpdateChurchAddress(Grace.Models.ChurchAddress instance);
    partial void DeleteChurchAddress(Grace.Models.ChurchAddress instance);
    partial void InsertChurchAddressType(Grace.Models.ChurchAddressType instance);
    partial void UpdateChurchAddressType(Grace.Models.ChurchAddressType instance);
    partial void DeleteChurchAddressType(Grace.Models.ChurchAddressType instance);
    partial void InsertCommittee(Grace.Models.Committee instance);
    partial void UpdateCommittee(Grace.Models.Committee instance);
    partial void DeleteCommittee(Grace.Models.Committee instance);
    partial void InsertCommitteeMember(Grace.Models.CommitteeMember instance);
    partial void UpdateCommitteeMember(Grace.Models.CommitteeMember instance);
    partial void DeleteCommitteeMember(Grace.Models.CommitteeMember instance);
    partial void InsertCommitteeRole(Grace.Models.CommitteeRole instance);
    partial void UpdateCommitteeRole(Grace.Models.CommitteeRole instance);
    partial void DeleteCommitteeRole(Grace.Models.CommitteeRole instance);
    partial void InsertDeacon(Grace.Models.Deacon instance);
    partial void UpdateDeacon(Grace.Models.Deacon instance);
    partial void DeleteDeacon(Grace.Models.Deacon instance);
    partial void InsertMember(Grace.Models.Member instance);
    partial void UpdateMember(Grace.Models.Member instance);
    partial void DeleteMember(Grace.Models.Member instance);
    partial void InsertMemberJoinType(Grace.Models.MemberJoinType instance);
    partial void UpdateMemberJoinType(Grace.Models.MemberJoinType instance);
    partial void DeleteMemberJoinType(Grace.Models.MemberJoinType instance);
    partial void InsertMemberLeaveType(Grace.Models.MemberLeaveType instance);
    partial void UpdateMemberLeaveType(Grace.Models.MemberLeaveType instance);
    partial void DeleteMemberLeaveType(Grace.Models.MemberLeaveType instance);
    partial void InsertMemberRelation(Grace.Models.MemberRelation instance);
    partial void UpdateMemberRelation(Grace.Models.MemberRelation instance);
    partial void DeleteMemberRelation(Grace.Models.MemberRelation instance);
    partial void InsertMemberRelationType(Grace.Models.MemberRelationType instance);
    partial void UpdateMemberRelationType(Grace.Models.MemberRelationType instance);
    partial void DeleteMemberRelationType(Grace.Models.MemberRelationType instance);
    partial void InsertPastor(Grace.Models.Pastor instance);
    partial void UpdatePastor(Grace.Models.Pastor instance);
    partial void DeletePastor(Grace.Models.Pastor instance);
    partial void InsertPastorType(Grace.Models.PastorType instance);
    partial void UpdatePastorType(Grace.Models.PastorType instance);
    partial void DeletePastorType(Grace.Models.PastorType instance);
    partial void InsertPersonnel(Grace.Models.Personnel instance);
    partial void UpdatePersonnel(Grace.Models.Personnel instance);
    partial void DeletePersonnel(Grace.Models.Personnel instance);
    partial void InsertPersonnelMember(Grace.Models.PersonnelMember instance);
    partial void UpdatePersonnelMember(Grace.Models.PersonnelMember instance);
    partial void DeletePersonnelMember(Grace.Models.PersonnelMember instance);
    partial void InsertService(Grace.Models.Service instance);
    partial void UpdateService(Grace.Models.Service instance);
    partial void DeleteService(Grace.Models.Service instance);
    partial void InsertSSAttendance(Grace.Models.SSAttendance instance);
    partial void UpdateSSAttendance(Grace.Models.SSAttendance instance);
    partial void DeleteSSAttendance(Grace.Models.SSAttendance instance);
    partial void InsertSSClassTeacher(Grace.Models.SSClassTeacher instance);
    partial void UpdateSSClassTeacher(Grace.Models.SSClassTeacher instance);
    partial void DeleteSSClassTeacher(Grace.Models.SSClassTeacher instance);
    partial void InsertSSClassTeacherType(Grace.Models.SSClassTeacherType instance);
    partial void UpdateSSClassTeacherType(Grace.Models.SSClassTeacherType instance);
    partial void DeleteSSClassTeacherType(Grace.Models.SSClassTeacherType instance);
    partial void InsertSSClass(Grace.Models.SSClass instance);
    partial void UpdateSSClass(Grace.Models.SSClass instance);
    partial void DeleteSSClass(Grace.Models.SSClass instance);
    partial void InsertSSClassMember(Grace.Models.SSClassMember instance);
    partial void UpdateSSClassMember(Grace.Models.SSClassMember instance);
    partial void DeleteSSClassMember(Grace.Models.SSClassMember instance);
    #endregion
		
		public db() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public db(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public db(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public db(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public db(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Grace.Models.Attendance> Attendances
		{
			get
			{
				return this.GetTable<Grace.Models.Attendance>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.State> States
		{
			get
			{
				return this.GetTable<Grace.Models.State>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.Church> Churches
		{
			get
			{
				return this.GetTable<Grace.Models.Church>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.ChurchAddress> ChurchAddresses
		{
			get
			{
				return this.GetTable<Grace.Models.ChurchAddress>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.ChurchAddressType> ChurchAddressTypes
		{
			get
			{
				return this.GetTable<Grace.Models.ChurchAddressType>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.Committee> Committees
		{
			get
			{
				return this.GetTable<Grace.Models.Committee>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.CommitteeMember> CommitteeMembers
		{
			get
			{
				return this.GetTable<Grace.Models.CommitteeMember>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.CommitteeRole> CommitteeRoles
		{
			get
			{
				return this.GetTable<Grace.Models.CommitteeRole>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.Deacon> Deacons
		{
			get
			{
				return this.GetTable<Grace.Models.Deacon>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.Member> Members
		{
			get
			{
				return this.GetTable<Grace.Models.Member>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.MemberJoinType> MemberJoinTypes
		{
			get
			{
				return this.GetTable<Grace.Models.MemberJoinType>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.MemberLeaveType> MemberLeaveTypes
		{
			get
			{
				return this.GetTable<Grace.Models.MemberLeaveType>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.MemberRelation> MemberRelations
		{
			get
			{
				return this.GetTable<Grace.Models.MemberRelation>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.MemberRelationType> MemberRelationTypes
		{
			get
			{
				return this.GetTable<Grace.Models.MemberRelationType>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.Pastor> Pastors
		{
			get
			{
				return this.GetTable<Grace.Models.Pastor>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.PastorType> PastorTypes
		{
			get
			{
				return this.GetTable<Grace.Models.PastorType>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.Personnel> Personnels
		{
			get
			{
				return this.GetTable<Grace.Models.Personnel>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.PersonnelMember> PersonnelMembers
		{
			get
			{
				return this.GetTable<Grace.Models.PersonnelMember>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.Service> Services
		{
			get
			{
				return this.GetTable<Grace.Models.Service>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.SSAttendance> SSAttendances
		{
			get
			{
				return this.GetTable<Grace.Models.SSAttendance>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.SSClassTeacher> SSClassTeachers
		{
			get
			{
				return this.GetTable<Grace.Models.SSClassTeacher>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.SSClassTeacherType> SSClassTeacherTypes
		{
			get
			{
				return this.GetTable<Grace.Models.SSClassTeacherType>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.SSClass> SSClasses
		{
			get
			{
				return this.GetTable<Grace.Models.SSClass>();
			}
		}
		
		public System.Data.Linq.Table<Grace.Models.SSClassMember> SSClassMembers
		{
			get
			{
				return this.GetTable<Grace.Models.SSClassMember>();
			}
		}
	}
}
namespace Grace.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attendance")]
	public partial class Attendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttendanceID;
		
		private System.Nullable<int> _ServiceID;
		
		private System.Nullable<System.DateTime> _SundayDate;
		
		private System.Nullable<int> _TotalNumber;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttendanceIDChanging(int value);
    partial void OnAttendanceIDChanged();
    partial void OnServiceIDChanging(System.Nullable<int> value);
    partial void OnServiceIDChanged();
    partial void OnSundayDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSundayDateChanged();
    partial void OnTotalNumberChanging(System.Nullable<int> value);
    partial void OnTotalNumberChanged();
    #endregion
		
		public Attendance()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttendanceID
		{
			get
			{
				return this._AttendanceID;
			}
			set
			{
				if ((this._AttendanceID != value))
				{
					this.OnAttendanceIDChanging(value);
					this.SendPropertyChanging();
					this._AttendanceID = value;
					this.SendPropertyChanged("AttendanceID");
					this.OnAttendanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int")]
		public System.Nullable<int> ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SundayDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SundayDate
		{
			get
			{
				return this._SundayDate;
			}
			set
			{
				if ((this._SundayDate != value))
				{
					this.OnSundayDateChanging(value);
					this.SendPropertyChanging();
					this._SundayDate = value;
					this.SendPropertyChanged("SundayDate");
					this.OnSundayDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalNumber", DbType="Int")]
		public System.Nullable<int> TotalNumber
		{
			get
			{
				return this._TotalNumber;
			}
			set
			{
				if ((this._TotalNumber != value))
				{
					this.OnTotalNumberChanging(value);
					this.SendPropertyChanging();
					this._TotalNumber = value;
					this.SendPropertyChanged("TotalNumber");
					this.OnTotalNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Attendance", Storage="_Service", ThisKey="ServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Attendances.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Attendances.Add(this);
						this._ServiceID = value.ServiceID;
					}
					else
					{
						this._ServiceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateID;
		
		private string _StateAbbreviation;
		
		private string _Description;
		
		private EntitySet<ChurchAddress> _ChurchAddresses;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnStateAbbreviationChanging(string value);
    partial void OnStateAbbreviationChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public State()
		{
			this._ChurchAddresses = new EntitySet<ChurchAddress>(new Action<ChurchAddress>(this.attach_ChurchAddresses), new Action<ChurchAddress>(this.detach_ChurchAddresses));
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateAbbreviation", DbType="VarChar(2)")]
		public string StateAbbreviation
		{
			get
			{
				return this._StateAbbreviation;
			}
			set
			{
				if ((this._StateAbbreviation != value))
				{
					this.OnStateAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._StateAbbreviation = value;
					this.SendPropertyChanged("StateAbbreviation");
					this.OnStateAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_ChurchAddress", Storage="_ChurchAddresses", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<ChurchAddress> ChurchAddresses
		{
			get
			{
				return this._ChurchAddresses;
			}
			set
			{
				this._ChurchAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Member", Storage="_Members", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChurchAddresses(ChurchAddress entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_ChurchAddresses(ChurchAddress entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Church")]
	public partial class Church : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChurchID;
		
		private string _Name;
		
		private string _OfficePhone;
		
		private string _PagerPhone;
		
		private string _EMail;
		
		private System.Nullable<System.DateTime> _DateStarted;
		
		private bool _IsDefault;
		
		private EntitySet<ChurchAddress> _ChurchAddresses;
		
		private EntitySet<Committee> _Committees;
		
		private EntitySet<Member> _Members;
		
		private EntitySet<Personnel> _Personnels;
		
		private EntitySet<Service> _Services;
		
		private EntitySet<SSClass> _SSClasses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChurchIDChanging(int value);
    partial void OnChurchIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOfficePhoneChanging(string value);
    partial void OnOfficePhoneChanged();
    partial void OnPagerPhoneChanging(string value);
    partial void OnPagerPhoneChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnDateStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateStartedChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public Church()
		{
			this._ChurchAddresses = new EntitySet<ChurchAddress>(new Action<ChurchAddress>(this.attach_ChurchAddresses), new Action<ChurchAddress>(this.detach_ChurchAddresses));
			this._Committees = new EntitySet<Committee>(new Action<Committee>(this.attach_Committees), new Action<Committee>(this.detach_Committees));
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._Personnels = new EntitySet<Personnel>(new Action<Personnel>(this.attach_Personnels), new Action<Personnel>(this.detach_Personnels));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._SSClasses = new EntitySet<SSClass>(new Action<SSClass>(this.attach_SSClasses), new Action<SSClass>(this.detach_SSClasses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChurchID
		{
			get
			{
				return this._ChurchID;
			}
			set
			{
				if ((this._ChurchID != value))
				{
					this.OnChurchIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchID = value;
					this.SendPropertyChanged("ChurchID");
					this.OnChurchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficePhone", DbType="VarChar(50)")]
		public string OfficePhone
		{
			get
			{
				return this._OfficePhone;
			}
			set
			{
				if ((this._OfficePhone != value))
				{
					this.OnOfficePhoneChanging(value);
					this.SendPropertyChanging();
					this._OfficePhone = value;
					this.SendPropertyChanged("OfficePhone");
					this.OnOfficePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PagerPhone", DbType="VarChar(50)")]
		public string PagerPhone
		{
			get
			{
				return this._PagerPhone;
			}
			set
			{
				if ((this._PagerPhone != value))
				{
					this.OnPagerPhoneChanging(value);
					this.SendPropertyChanging();
					this._PagerPhone = value;
					this.SendPropertyChanged("PagerPhone");
					this.OnPagerPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="VarChar(255)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStarted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateStarted
		{
			get
			{
				return this._DateStarted;
			}
			set
			{
				if ((this._DateStarted != value))
				{
					this.OnDateStartedChanging(value);
					this.SendPropertyChanging();
					this._DateStarted = value;
					this.SendPropertyChanged("DateStarted");
					this.OnDateStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_ChurchAddress", Storage="_ChurchAddresses", ThisKey="ChurchID", OtherKey="ChurchID")]
		public EntitySet<ChurchAddress> ChurchAddresses
		{
			get
			{
				return this._ChurchAddresses;
			}
			set
			{
				this._ChurchAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_Committee", Storage="_Committees", ThisKey="ChurchID", OtherKey="ChurchID")]
		public EntitySet<Committee> Committees
		{
			get
			{
				return this._Committees;
			}
			set
			{
				this._Committees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_Member", Storage="_Members", ThisKey="ChurchID", OtherKey="ChurchID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_Personnel", Storage="_Personnels", ThisKey="ChurchID", OtherKey="ChurchID")]
		public EntitySet<Personnel> Personnels
		{
			get
			{
				return this._Personnels;
			}
			set
			{
				this._Personnels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_Service", Storage="_Services", ThisKey="ChurchID", OtherKey="ChurchID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_SSClass", Storage="_SSClasses", ThisKey="ChurchID", OtherKey="ChurchID")]
		public EntitySet<SSClass> SSClasses
		{
			get
			{
				return this._SSClasses;
			}
			set
			{
				this._SSClasses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChurchAddresses(ChurchAddress entity)
		{
			this.SendPropertyChanging();
			entity.Church = this;
		}
		
		private void detach_ChurchAddresses(ChurchAddress entity)
		{
			this.SendPropertyChanging();
			entity.Church = null;
		}
		
		private void attach_Committees(Committee entity)
		{
			this.SendPropertyChanging();
			entity.Church = this;
		}
		
		private void detach_Committees(Committee entity)
		{
			this.SendPropertyChanging();
			entity.Church = null;
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Church = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Church = null;
		}
		
		private void attach_Personnels(Personnel entity)
		{
			this.SendPropertyChanging();
			entity.Church = this;
		}
		
		private void detach_Personnels(Personnel entity)
		{
			this.SendPropertyChanging();
			entity.Church = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Church = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Church = null;
		}
		
		private void attach_SSClasses(SSClass entity)
		{
			this.SendPropertyChanging();
			entity.Church = this;
		}
		
		private void detach_SSClasses(SSClass entity)
		{
			this.SendPropertyChanging();
			entity.Church = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChurchAddress")]
	public partial class ChurchAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChurchAddressID;
		
		private System.Nullable<int> _ChurchID;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private System.Nullable<int> _StateID;
		
		private string _ZipCode;
		
		private int _ChurchAddressTypeID;
		
		private EntityRef<Church> _Church;
		
		private EntityRef<State> _State;
		
		private EntityRef<ChurchAddressType> _ChurchAddressType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChurchAddressIDChanging(int value);
    partial void OnChurchAddressIDChanged();
    partial void OnChurchIDChanging(System.Nullable<int> value);
    partial void OnChurchIDChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnChurchAddressTypeIDChanging(int value);
    partial void OnChurchAddressTypeIDChanged();
    #endregion
		
		public ChurchAddress()
		{
			this._Church = default(EntityRef<Church>);
			this._State = default(EntityRef<State>);
			this._ChurchAddressType = default(EntityRef<ChurchAddressType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChurchAddressID
		{
			get
			{
				return this._ChurchAddressID;
			}
			set
			{
				if ((this._ChurchAddressID != value))
				{
					this.OnChurchAddressIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchAddressID = value;
					this.SendPropertyChanged("ChurchAddressID");
					this.OnChurchAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchID", DbType="Int")]
		public System.Nullable<int> ChurchID
		{
			get
			{
				return this._ChurchID;
			}
			set
			{
				if ((this._ChurchID != value))
				{
					if (this._Church.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChurchIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchID = value;
					this.SendPropertyChanged("ChurchID");
					this.OnChurchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(255)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(255)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(50)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchAddressTypeID", DbType="Int NOT NULL")]
		public int ChurchAddressTypeID
		{
			get
			{
				return this._ChurchAddressTypeID;
			}
			set
			{
				if ((this._ChurchAddressTypeID != value))
				{
					if (this._ChurchAddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChurchAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchAddressTypeID = value;
					this.SendPropertyChanged("ChurchAddressTypeID");
					this.OnChurchAddressTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_ChurchAddress", Storage="_Church", ThisKey="ChurchID", OtherKey="ChurchID", IsForeignKey=true)]
		public Church Church
		{
			get
			{
				return this._Church.Entity;
			}
			set
			{
				Church previousValue = this._Church.Entity;
				if (((previousValue != value) 
							|| (this._Church.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Church.Entity = null;
						previousValue.ChurchAddresses.Remove(this);
					}
					this._Church.Entity = value;
					if ((value != null))
					{
						value.ChurchAddresses.Add(this);
						this._ChurchID = value.ChurchID;
					}
					else
					{
						this._ChurchID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Church");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_ChurchAddress", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.ChurchAddresses.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.ChurchAddresses.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChurchAddressType_ChurchAddress", Storage="_ChurchAddressType", ThisKey="ChurchAddressTypeID", OtherKey="ChurchAddressTypeID", IsForeignKey=true)]
		public ChurchAddressType ChurchAddressType
		{
			get
			{
				return this._ChurchAddressType.Entity;
			}
			set
			{
				ChurchAddressType previousValue = this._ChurchAddressType.Entity;
				if (((previousValue != value) 
							|| (this._ChurchAddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChurchAddressType.Entity = null;
						previousValue.ChurchAddresses.Remove(this);
					}
					this._ChurchAddressType.Entity = value;
					if ((value != null))
					{
						value.ChurchAddresses.Add(this);
						this._ChurchAddressTypeID = value.ChurchAddressTypeID;
					}
					else
					{
						this._ChurchAddressTypeID = default(int);
					}
					this.SendPropertyChanged("ChurchAddressType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChurchAddressType")]
	public partial class ChurchAddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChurchAddressTypeID;
		
		private string _Description;
		
		private EntitySet<ChurchAddress> _ChurchAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChurchAddressTypeIDChanging(int value);
    partial void OnChurchAddressTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ChurchAddressType()
		{
			this._ChurchAddresses = new EntitySet<ChurchAddress>(new Action<ChurchAddress>(this.attach_ChurchAddresses), new Action<ChurchAddress>(this.detach_ChurchAddresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchAddressTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChurchAddressTypeID
		{
			get
			{
				return this._ChurchAddressTypeID;
			}
			set
			{
				if ((this._ChurchAddressTypeID != value))
				{
					this.OnChurchAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchAddressTypeID = value;
					this.SendPropertyChanged("ChurchAddressTypeID");
					this.OnChurchAddressTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChurchAddressType_ChurchAddress", Storage="_ChurchAddresses", ThisKey="ChurchAddressTypeID", OtherKey="ChurchAddressTypeID")]
		public EntitySet<ChurchAddress> ChurchAddresses
		{
			get
			{
				return this._ChurchAddresses;
			}
			set
			{
				this._ChurchAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChurchAddresses(ChurchAddress entity)
		{
			this.SendPropertyChanging();
			entity.ChurchAddressType = this;
		}
		
		private void detach_ChurchAddresses(ChurchAddress entity)
		{
			this.SendPropertyChanging();
			entity.ChurchAddressType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Committee")]
	public partial class Committee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommitteeID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _DateFormed;
		
		private System.Nullable<System.DateTime> _DateDisbanded;
		
		private int _ChurchID;
		
		private EntitySet<CommitteeMember> _CommitteeMembers;
		
		private EntityRef<Church> _Church;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommitteeIDChanging(int value);
    partial void OnCommitteeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateFormedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFormedChanged();
    partial void OnDateDisbandedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDisbandedChanged();
    partial void OnChurchIDChanging(int value);
    partial void OnChurchIDChanged();
    #endregion
		
		public Committee()
		{
			this._CommitteeMembers = new EntitySet<CommitteeMember>(new Action<CommitteeMember>(this.attach_CommitteeMembers), new Action<CommitteeMember>(this.detach_CommitteeMembers));
			this._Church = default(EntityRef<Church>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitteeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommitteeID
		{
			get
			{
				return this._CommitteeID;
			}
			set
			{
				if ((this._CommitteeID != value))
				{
					this.OnCommitteeIDChanging(value);
					this.SendPropertyChanging();
					this._CommitteeID = value;
					this.SendPropertyChanged("CommitteeID");
					this.OnCommitteeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFormed", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateFormed
		{
			get
			{
				return this._DateFormed;
			}
			set
			{
				if ((this._DateFormed != value))
				{
					this.OnDateFormedChanging(value);
					this.SendPropertyChanging();
					this._DateFormed = value;
					this.SendPropertyChanged("DateFormed");
					this.OnDateFormedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDisbanded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDisbanded
		{
			get
			{
				return this._DateDisbanded;
			}
			set
			{
				if ((this._DateDisbanded != value))
				{
					this.OnDateDisbandedChanging(value);
					this.SendPropertyChanging();
					this._DateDisbanded = value;
					this.SendPropertyChanged("DateDisbanded");
					this.OnDateDisbandedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchID", DbType="Int NOT NULL")]
		public int ChurchID
		{
			get
			{
				return this._ChurchID;
			}
			set
			{
				if ((this._ChurchID != value))
				{
					if (this._Church.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChurchIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchID = value;
					this.SendPropertyChanged("ChurchID");
					this.OnChurchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Committee_CommitteeMember", Storage="_CommitteeMembers", ThisKey="CommitteeID", OtherKey="CommitteeID")]
		public EntitySet<CommitteeMember> CommitteeMembers
		{
			get
			{
				return this._CommitteeMembers;
			}
			set
			{
				this._CommitteeMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_Committee", Storage="_Church", ThisKey="ChurchID", OtherKey="ChurchID", IsForeignKey=true)]
		public Church Church
		{
			get
			{
				return this._Church.Entity;
			}
			set
			{
				Church previousValue = this._Church.Entity;
				if (((previousValue != value) 
							|| (this._Church.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Church.Entity = null;
						previousValue.Committees.Remove(this);
					}
					this._Church.Entity = value;
					if ((value != null))
					{
						value.Committees.Add(this);
						this._ChurchID = value.ChurchID;
					}
					else
					{
						this._ChurchID = default(int);
					}
					this.SendPropertyChanged("Church");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitteeMembers(CommitteeMember entity)
		{
			this.SendPropertyChanging();
			entity.Committee = this;
		}
		
		private void detach_CommitteeMembers(CommitteeMember entity)
		{
			this.SendPropertyChanging();
			entity.Committee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommitteeMember")]
	public partial class CommitteeMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommitteeMemberID;
		
		private int _MemberID;
		
		private int _CommitteeID;
		
		private int _CommitteeRoleID;
		
		private EntityRef<Committee> _Committee;
		
		private EntityRef<CommitteeRole> _CommitteeRole;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommitteeMemberIDChanging(int value);
    partial void OnCommitteeMemberIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnCommitteeIDChanging(int value);
    partial void OnCommitteeIDChanged();
    partial void OnCommitteeRoleIDChanging(int value);
    partial void OnCommitteeRoleIDChanged();
    #endregion
		
		public CommitteeMember()
		{
			this._Committee = default(EntityRef<Committee>);
			this._CommitteeRole = default(EntityRef<CommitteeRole>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitteeMemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommitteeMemberID
		{
			get
			{
				return this._CommitteeMemberID;
			}
			set
			{
				if ((this._CommitteeMemberID != value))
				{
					this.OnCommitteeMemberIDChanging(value);
					this.SendPropertyChanging();
					this._CommitteeMemberID = value;
					this.SendPropertyChanged("CommitteeMemberID");
					this.OnCommitteeMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitteeID", DbType="Int NOT NULL")]
		public int CommitteeID
		{
			get
			{
				return this._CommitteeID;
			}
			set
			{
				if ((this._CommitteeID != value))
				{
					if (this._Committee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommitteeIDChanging(value);
					this.SendPropertyChanging();
					this._CommitteeID = value;
					this.SendPropertyChanged("CommitteeID");
					this.OnCommitteeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitteeRoleID", DbType="Int NOT NULL")]
		public int CommitteeRoleID
		{
			get
			{
				return this._CommitteeRoleID;
			}
			set
			{
				if ((this._CommitteeRoleID != value))
				{
					if (this._CommitteeRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommitteeRoleIDChanging(value);
					this.SendPropertyChanging();
					this._CommitteeRoleID = value;
					this.SendPropertyChanged("CommitteeRoleID");
					this.OnCommitteeRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Committee_CommitteeMember", Storage="_Committee", ThisKey="CommitteeID", OtherKey="CommitteeID", IsForeignKey=true)]
		public Committee Committee
		{
			get
			{
				return this._Committee.Entity;
			}
			set
			{
				Committee previousValue = this._Committee.Entity;
				if (((previousValue != value) 
							|| (this._Committee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Committee.Entity = null;
						previousValue.CommitteeMembers.Remove(this);
					}
					this._Committee.Entity = value;
					if ((value != null))
					{
						value.CommitteeMembers.Add(this);
						this._CommitteeID = value.CommitteeID;
					}
					else
					{
						this._CommitteeID = default(int);
					}
					this.SendPropertyChanged("Committee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommitteeRole_CommitteeMember", Storage="_CommitteeRole", ThisKey="CommitteeRoleID", OtherKey="CommitteeRoleID", IsForeignKey=true)]
		public CommitteeRole CommitteeRole
		{
			get
			{
				return this._CommitteeRole.Entity;
			}
			set
			{
				CommitteeRole previousValue = this._CommitteeRole.Entity;
				if (((previousValue != value) 
							|| (this._CommitteeRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitteeRole.Entity = null;
						previousValue.CommitteeMembers.Remove(this);
					}
					this._CommitteeRole.Entity = value;
					if ((value != null))
					{
						value.CommitteeMembers.Add(this);
						this._CommitteeRoleID = value.CommitteeRoleID;
					}
					else
					{
						this._CommitteeRoleID = default(int);
					}
					this.SendPropertyChanged("CommitteeRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CommitteeMember", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.CommitteeMembers.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.CommitteeMembers.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommitteeRole")]
	public partial class CommitteeRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommitteeRoleID;
		
		private string _Description;
		
		private EntitySet<CommitteeMember> _CommitteeMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommitteeRoleIDChanging(int value);
    partial void OnCommitteeRoleIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CommitteeRole()
		{
			this._CommitteeMembers = new EntitySet<CommitteeMember>(new Action<CommitteeMember>(this.attach_CommitteeMembers), new Action<CommitteeMember>(this.detach_CommitteeMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitteeRoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommitteeRoleID
		{
			get
			{
				return this._CommitteeRoleID;
			}
			set
			{
				if ((this._CommitteeRoleID != value))
				{
					this.OnCommitteeRoleIDChanging(value);
					this.SendPropertyChanging();
					this._CommitteeRoleID = value;
					this.SendPropertyChanged("CommitteeRoleID");
					this.OnCommitteeRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommitteeRole_CommitteeMember", Storage="_CommitteeMembers", ThisKey="CommitteeRoleID", OtherKey="CommitteeRoleID")]
		public EntitySet<CommitteeMember> CommitteeMembers
		{
			get
			{
				return this._CommitteeMembers;
			}
			set
			{
				this._CommitteeMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitteeMembers(CommitteeMember entity)
		{
			this.SendPropertyChanging();
			entity.CommitteeRole = this;
		}
		
		private void detach_CommitteeMembers(CommitteeMember entity)
		{
			this.SendPropertyChanging();
			entity.CommitteeRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Deacon")]
	public partial class Deacon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeaconID;
		
		private int _MemberID;
		
		private bool _IsActive;
		
		private System.Nullable<System.DateTime> _DateOrdained;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeaconIDChanging(int value);
    partial void OnDeaconIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnDateOrdainedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOrdainedChanged();
    #endregion
		
		public Deacon()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeaconID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeaconID
		{
			get
			{
				return this._DeaconID;
			}
			set
			{
				if ((this._DeaconID != value))
				{
					this.OnDeaconIDChanging(value);
					this.SendPropertyChanging();
					this._DeaconID = value;
					this.SendPropertyChanged("DeaconID");
					this.OnDeaconIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOrdained", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOrdained
		{
			get
			{
				return this._DateOrdained;
			}
			set
			{
				if ((this._DateOrdained != value))
				{
					this.OnDateOrdainedChanging(value);
					this.SendPropertyChanging();
					this._DateOrdained = value;
					this.SendPropertyChanged("DateOrdained");
					this.OnDateOrdainedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Deacon", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Deacons.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Deacons.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _FirstName;
		
		private System.Nullable<char> _MiddleInitial;
		
		private string _LastName;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private System.Nullable<int> _StateID;
		
		private string _ZipCode;
		
		private string _HomePhone;
		
		private string _WorkPhone;
		
		private string _EMail;
		
		private string _AlternateEMail;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private bool _Member1;
		
		private System.Nullable<System.DateTime> _DateJoin;
		
		private System.Nullable<int> _MemberJoinTypeID;
		
		private System.Nullable<System.DateTime> _DateLeave;
		
		private System.Nullable<int> _MemberLeaveTypeID;
		
		private bool _IsMale;
		
		private System.Nullable<System.DateTime> _SalvationDate;
		
		private System.Nullable<System.DateTime> _BaptismDate;
		
		private int _ChurchID;
		
		private EntitySet<CommitteeMember> _CommitteeMembers;
		
		private EntitySet<Deacon> _Deacons;
		
		private EntitySet<MemberRelation> _MemberRelations;
		
		private EntitySet<MemberRelation> _MemberRelations1;
		
		private EntitySet<Pastor> _Pastors;
		
		private EntitySet<PersonnelMember> _PersonnelMembers;
		
		private EntitySet<SSClassTeacher> _SSClassTeachers;
		
		private EntitySet<SSClassMember> _SSClassMembers;
		
		private EntityRef<Church> _Church;
		
		private EntityRef<State> _State;
		
		private EntityRef<MemberJoinType> _MemberJoinType;
		
		private EntityRef<MemberLeaveType> _MemberLeaveType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleInitialChanging(System.Nullable<char> value);
    partial void OnMiddleInitialChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnAlternateEMailChanging(string value);
    partial void OnAlternateEMailChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnMember1Changing(bool value);
    partial void OnMember1Changed();
    partial void OnDateJoinChanging(System.Nullable<System.DateTime> value);
    partial void OnDateJoinChanged();
    partial void OnMemberJoinTypeIDChanging(System.Nullable<int> value);
    partial void OnMemberJoinTypeIDChanged();
    partial void OnDateLeaveChanging(System.Nullable<System.DateTime> value);
    partial void OnDateLeaveChanged();
    partial void OnMemberLeaveTypeIDChanging(System.Nullable<int> value);
    partial void OnMemberLeaveTypeIDChanged();
    partial void OnIsMaleChanging(bool value);
    partial void OnIsMaleChanged();
    partial void OnSalvationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSalvationDateChanged();
    partial void OnBaptismDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBaptismDateChanged();
    partial void OnChurchIDChanging(int value);
    partial void OnChurchIDChanged();
    #endregion
		
		public Member()
		{
			this._CommitteeMembers = new EntitySet<CommitteeMember>(new Action<CommitteeMember>(this.attach_CommitteeMembers), new Action<CommitteeMember>(this.detach_CommitteeMembers));
			this._Deacons = new EntitySet<Deacon>(new Action<Deacon>(this.attach_Deacons), new Action<Deacon>(this.detach_Deacons));
			this._MemberRelations = new EntitySet<MemberRelation>(new Action<MemberRelation>(this.attach_MemberRelations), new Action<MemberRelation>(this.detach_MemberRelations));
			this._MemberRelations1 = new EntitySet<MemberRelation>(new Action<MemberRelation>(this.attach_MemberRelations1), new Action<MemberRelation>(this.detach_MemberRelations1));
			this._Pastors = new EntitySet<Pastor>(new Action<Pastor>(this.attach_Pastors), new Action<Pastor>(this.detach_Pastors));
			this._PersonnelMembers = new EntitySet<PersonnelMember>(new Action<PersonnelMember>(this.attach_PersonnelMembers), new Action<PersonnelMember>(this.detach_PersonnelMembers));
			this._SSClassTeachers = new EntitySet<SSClassTeacher>(new Action<SSClassTeacher>(this.attach_SSClassTeachers), new Action<SSClassTeacher>(this.detach_SSClassTeachers));
			this._SSClassMembers = new EntitySet<SSClassMember>(new Action<SSClassMember>(this.attach_SSClassMembers), new Action<SSClassMember>(this.detach_SSClassMembers));
			this._Church = default(EntityRef<Church>);
			this._State = default(EntityRef<State>);
			this._MemberJoinType = default(EntityRef<MemberJoinType>);
			this._MemberLeaveType = default(EntityRef<MemberLeaveType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(255)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleInitial", DbType="Char(1)")]
		public System.Nullable<char> MiddleInitial
		{
			get
			{
				return this._MiddleInitial;
			}
			set
			{
				if ((this._MiddleInitial != value))
				{
					this.OnMiddleInitialChanging(value);
					this.SendPropertyChanging();
					this._MiddleInitial = value;
					this.SendPropertyChanged("MiddleInitial");
					this.OnMiddleInitialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(255)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(255)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(50)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(50)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="VarChar(50)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="VarChar(255)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternateEMail", DbType="VarChar(255)")]
		public string AlternateEMail
		{
			get
			{
				return this._AlternateEMail;
			}
			set
			{
				if ((this._AlternateEMail != value))
				{
					this.OnAlternateEMailChanging(value);
					this.SendPropertyChanging();
					this._AlternateEMail = value;
					this.SendPropertyChanged("AlternateEMail");
					this.OnAlternateEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Member", Storage="_Member1", DbType="Bit NOT NULL")]
		public bool Member1
		{
			get
			{
				return this._Member1;
			}
			set
			{
				if ((this._Member1 != value))
				{
					this.OnMember1Changing(value);
					this.SendPropertyChanging();
					this._Member1 = value;
					this.SendPropertyChanged("Member1");
					this.OnMember1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateJoin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateJoin
		{
			get
			{
				return this._DateJoin;
			}
			set
			{
				if ((this._DateJoin != value))
				{
					this.OnDateJoinChanging(value);
					this.SendPropertyChanging();
					this._DateJoin = value;
					this.SendPropertyChanged("DateJoin");
					this.OnDateJoinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberJoinTypeID", DbType="Int")]
		public System.Nullable<int> MemberJoinTypeID
		{
			get
			{
				return this._MemberJoinTypeID;
			}
			set
			{
				if ((this._MemberJoinTypeID != value))
				{
					if (this._MemberJoinType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberJoinTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberJoinTypeID = value;
					this.SendPropertyChanged("MemberJoinTypeID");
					this.OnMemberJoinTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLeave", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateLeave
		{
			get
			{
				return this._DateLeave;
			}
			set
			{
				if ((this._DateLeave != value))
				{
					this.OnDateLeaveChanging(value);
					this.SendPropertyChanging();
					this._DateLeave = value;
					this.SendPropertyChanged("DateLeave");
					this.OnDateLeaveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberLeaveTypeID", DbType="Int")]
		public System.Nullable<int> MemberLeaveTypeID
		{
			get
			{
				return this._MemberLeaveTypeID;
			}
			set
			{
				if ((this._MemberLeaveTypeID != value))
				{
					if (this._MemberLeaveType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberLeaveTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberLeaveTypeID = value;
					this.SendPropertyChanged("MemberLeaveTypeID");
					this.OnMemberLeaveTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMale", DbType="Bit NOT NULL")]
		public bool IsMale
		{
			get
			{
				return this._IsMale;
			}
			set
			{
				if ((this._IsMale != value))
				{
					this.OnIsMaleChanging(value);
					this.SendPropertyChanging();
					this._IsMale = value;
					this.SendPropertyChanged("IsMale");
					this.OnIsMaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalvationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SalvationDate
		{
			get
			{
				return this._SalvationDate;
			}
			set
			{
				if ((this._SalvationDate != value))
				{
					this.OnSalvationDateChanging(value);
					this.SendPropertyChanging();
					this._SalvationDate = value;
					this.SendPropertyChanged("SalvationDate");
					this.OnSalvationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaptismDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BaptismDate
		{
			get
			{
				return this._BaptismDate;
			}
			set
			{
				if ((this._BaptismDate != value))
				{
					this.OnBaptismDateChanging(value);
					this.SendPropertyChanging();
					this._BaptismDate = value;
					this.SendPropertyChanged("BaptismDate");
					this.OnBaptismDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchID", DbType="Int NOT NULL")]
		public int ChurchID
		{
			get
			{
				return this._ChurchID;
			}
			set
			{
				if ((this._ChurchID != value))
				{
					if (this._Church.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChurchIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchID = value;
					this.SendPropertyChanged("ChurchID");
					this.OnChurchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CommitteeMember", Storage="_CommitteeMembers", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<CommitteeMember> CommitteeMembers
		{
			get
			{
				return this._CommitteeMembers;
			}
			set
			{
				this._CommitteeMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Deacon", Storage="_Deacons", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Deacon> Deacons
		{
			get
			{
				return this._Deacons;
			}
			set
			{
				this._Deacons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberRelation", Storage="_MemberRelations", ThisKey="MemberID", OtherKey="HeadMemberID")]
		public EntitySet<MemberRelation> MemberRelations
		{
			get
			{
				return this._MemberRelations;
			}
			set
			{
				this._MemberRelations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberRelation1", Storage="_MemberRelations1", ThisKey="MemberID", OtherKey="RelationMemberID")]
		public EntitySet<MemberRelation> MemberRelations1
		{
			get
			{
				return this._MemberRelations1;
			}
			set
			{
				this._MemberRelations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Pastor", Storage="_Pastors", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Pastor> Pastors
		{
			get
			{
				return this._Pastors;
			}
			set
			{
				this._Pastors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_PersonnelMember", Storage="_PersonnelMembers", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<PersonnelMember> PersonnelMembers
		{
			get
			{
				return this._PersonnelMembers;
			}
			set
			{
				this._PersonnelMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SSClassTeacher", Storage="_SSClassTeachers", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<SSClassTeacher> SSClassTeachers
		{
			get
			{
				return this._SSClassTeachers;
			}
			set
			{
				this._SSClassTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SSClassMember", Storage="_SSClassMembers", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<SSClassMember> SSClassMembers
		{
			get
			{
				return this._SSClassMembers;
			}
			set
			{
				this._SSClassMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_Member", Storage="_Church", ThisKey="ChurchID", OtherKey="ChurchID", IsForeignKey=true)]
		public Church Church
		{
			get
			{
				return this._Church.Entity;
			}
			set
			{
				Church previousValue = this._Church.Entity;
				if (((previousValue != value) 
							|| (this._Church.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Church.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._Church.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._ChurchID = value.ChurchID;
					}
					else
					{
						this._ChurchID = default(int);
					}
					this.SendPropertyChanged("Church");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Member", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberJoinType_Member", Storage="_MemberJoinType", ThisKey="MemberJoinTypeID", OtherKey="MemberJoinTypeID", IsForeignKey=true)]
		public MemberJoinType MemberJoinType
		{
			get
			{
				return this._MemberJoinType.Entity;
			}
			set
			{
				MemberJoinType previousValue = this._MemberJoinType.Entity;
				if (((previousValue != value) 
							|| (this._MemberJoinType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberJoinType.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._MemberJoinType.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._MemberJoinTypeID = value.MemberJoinTypeID;
					}
					else
					{
						this._MemberJoinTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MemberJoinType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberLeaveType_Member", Storage="_MemberLeaveType", ThisKey="MemberLeaveTypeID", OtherKey="MemberLeaveTypeID", IsForeignKey=true)]
		public MemberLeaveType MemberLeaveType
		{
			get
			{
				return this._MemberLeaveType.Entity;
			}
			set
			{
				MemberLeaveType previousValue = this._MemberLeaveType.Entity;
				if (((previousValue != value) 
							|| (this._MemberLeaveType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberLeaveType.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._MemberLeaveType.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._MemberLeaveTypeID = value.MemberLeaveTypeID;
					}
					else
					{
						this._MemberLeaveTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MemberLeaveType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitteeMembers(CommitteeMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_CommitteeMembers(CommitteeMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Deacons(Deacon entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Deacons(Deacon entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_MemberRelations(MemberRelation entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_MemberRelations(MemberRelation entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_MemberRelations1(MemberRelation entity)
		{
			this.SendPropertyChanging();
			entity.Member1 = this;
		}
		
		private void detach_MemberRelations1(MemberRelation entity)
		{
			this.SendPropertyChanging();
			entity.Member1 = null;
		}
		
		private void attach_Pastors(Pastor entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Pastors(Pastor entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_PersonnelMembers(PersonnelMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_PersonnelMembers(PersonnelMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_SSClassTeachers(SSClassTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_SSClassTeachers(SSClassTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_SSClassMembers(SSClassMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_SSClassMembers(SSClassMember entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberJoinType")]
	public partial class MemberJoinType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberJoinTypeID;
		
		private string _Description;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberJoinTypeIDChanging(int value);
    partial void OnMemberJoinTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MemberJoinType()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberJoinTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberJoinTypeID
		{
			get
			{
				return this._MemberJoinTypeID;
			}
			set
			{
				if ((this._MemberJoinTypeID != value))
				{
					this.OnMemberJoinTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberJoinTypeID = value;
					this.SendPropertyChanged("MemberJoinTypeID");
					this.OnMemberJoinTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberJoinType_Member", Storage="_Members", ThisKey="MemberJoinTypeID", OtherKey="MemberJoinTypeID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberJoinType = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberJoinType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberLeaveType")]
	public partial class MemberLeaveType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberLeaveTypeID;
		
		private string _Description;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberLeaveTypeIDChanging(int value);
    partial void OnMemberLeaveTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MemberLeaveType()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberLeaveTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberLeaveTypeID
		{
			get
			{
				return this._MemberLeaveTypeID;
			}
			set
			{
				if ((this._MemberLeaveTypeID != value))
				{
					this.OnMemberLeaveTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberLeaveTypeID = value;
					this.SendPropertyChanged("MemberLeaveTypeID");
					this.OnMemberLeaveTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberLeaveType_Member", Storage="_Members", ThisKey="MemberLeaveTypeID", OtherKey="MemberLeaveTypeID")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberLeaveType = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.MemberLeaveType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberRelation")]
	public partial class MemberRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationshipID;
		
		private int _HeadMemberID;
		
		private int _RelationMemberID;
		
		private int _MemberRelationTypeID;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Member> _Member1;
		
		private EntityRef<MemberRelationType> _MemberRelationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIDChanging(int value);
    partial void OnRelationshipIDChanged();
    partial void OnHeadMemberIDChanging(int value);
    partial void OnHeadMemberIDChanged();
    partial void OnRelationMemberIDChanging(int value);
    partial void OnRelationMemberIDChanged();
    partial void OnMemberRelationTypeIDChanging(int value);
    partial void OnMemberRelationTypeIDChanged();
    #endregion
		
		public MemberRelation()
		{
			this._Member = default(EntityRef<Member>);
			this._Member1 = default(EntityRef<Member>);
			this._MemberRelationType = default(EntityRef<MemberRelationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationshipID
		{
			get
			{
				return this._RelationshipID;
			}
			set
			{
				if ((this._RelationshipID != value))
				{
					this.OnRelationshipIDChanging(value);
					this.SendPropertyChanging();
					this._RelationshipID = value;
					this.SendPropertyChanged("RelationshipID");
					this.OnRelationshipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadMemberID", DbType="Int NOT NULL")]
		public int HeadMemberID
		{
			get
			{
				return this._HeadMemberID;
			}
			set
			{
				if ((this._HeadMemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeadMemberIDChanging(value);
					this.SendPropertyChanging();
					this._HeadMemberID = value;
					this.SendPropertyChanged("HeadMemberID");
					this.OnHeadMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationMemberID", DbType="Int NOT NULL")]
		public int RelationMemberID
		{
			get
			{
				return this._RelationMemberID;
			}
			set
			{
				if ((this._RelationMemberID != value))
				{
					if (this._Member1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationMemberIDChanging(value);
					this.SendPropertyChanging();
					this._RelationMemberID = value;
					this.SendPropertyChanged("RelationMemberID");
					this.OnRelationMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberRelationTypeID", DbType="Int NOT NULL")]
		public int MemberRelationTypeID
		{
			get
			{
				return this._MemberRelationTypeID;
			}
			set
			{
				if ((this._MemberRelationTypeID != value))
				{
					if (this._MemberRelationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberRelationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberRelationTypeID = value;
					this.SendPropertyChanged("MemberRelationTypeID");
					this.OnMemberRelationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberRelation", Storage="_Member", ThisKey="HeadMemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.MemberRelations.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.MemberRelations.Add(this);
						this._HeadMemberID = value.MemberID;
					}
					else
					{
						this._HeadMemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberRelation1", Storage="_Member1", ThisKey="RelationMemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member1
		{
			get
			{
				return this._Member1.Entity;
			}
			set
			{
				Member previousValue = this._Member1.Entity;
				if (((previousValue != value) 
							|| (this._Member1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member1.Entity = null;
						previousValue.MemberRelations1.Remove(this);
					}
					this._Member1.Entity = value;
					if ((value != null))
					{
						value.MemberRelations1.Add(this);
						this._RelationMemberID = value.MemberID;
					}
					else
					{
						this._RelationMemberID = default(int);
					}
					this.SendPropertyChanged("Member1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberRelationType_MemberRelation", Storage="_MemberRelationType", ThisKey="MemberRelationTypeID", OtherKey="MemberRelationTypeID", IsForeignKey=true)]
		public MemberRelationType MemberRelationType
		{
			get
			{
				return this._MemberRelationType.Entity;
			}
			set
			{
				MemberRelationType previousValue = this._MemberRelationType.Entity;
				if (((previousValue != value) 
							|| (this._MemberRelationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberRelationType.Entity = null;
						previousValue.MemberRelations.Remove(this);
					}
					this._MemberRelationType.Entity = value;
					if ((value != null))
					{
						value.MemberRelations.Add(this);
						this._MemberRelationTypeID = value.MemberRelationTypeID;
					}
					else
					{
						this._MemberRelationTypeID = default(int);
					}
					this.SendPropertyChanged("MemberRelationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberRelationType")]
	public partial class MemberRelationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberRelationTypeID;
		
		private string _Description;
		
		private EntitySet<MemberRelation> _MemberRelations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberRelationTypeIDChanging(int value);
    partial void OnMemberRelationTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MemberRelationType()
		{
			this._MemberRelations = new EntitySet<MemberRelation>(new Action<MemberRelation>(this.attach_MemberRelations), new Action<MemberRelation>(this.detach_MemberRelations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberRelationTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberRelationTypeID
		{
			get
			{
				return this._MemberRelationTypeID;
			}
			set
			{
				if ((this._MemberRelationTypeID != value))
				{
					this.OnMemberRelationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MemberRelationTypeID = value;
					this.SendPropertyChanged("MemberRelationTypeID");
					this.OnMemberRelationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MemberRelationType_MemberRelation", Storage="_MemberRelations", ThisKey="MemberRelationTypeID", OtherKey="MemberRelationTypeID")]
		public EntitySet<MemberRelation> MemberRelations
		{
			get
			{
				return this._MemberRelations;
			}
			set
			{
				this._MemberRelations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MemberRelations(MemberRelation entity)
		{
			this.SendPropertyChanging();
			entity.MemberRelationType = this;
		}
		
		private void detach_MemberRelations(MemberRelation entity)
		{
			this.SendPropertyChanging();
			entity.MemberRelationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pastor")]
	public partial class Pastor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PastorID;
		
		private int _PastorTypeID;
		
		private System.Nullable<System.DateTime> _DateOrdained;
		
		private System.Nullable<System.DateTime> _DateRetired;
		
		private int _MemberID;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<PastorType> _PastorType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPastorIDChanging(int value);
    partial void OnPastorIDChanged();
    partial void OnPastorTypeIDChanging(int value);
    partial void OnPastorTypeIDChanged();
    partial void OnDateOrdainedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOrdainedChanged();
    partial void OnDateRetiredChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRetiredChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    #endregion
		
		public Pastor()
		{
			this._Member = default(EntityRef<Member>);
			this._PastorType = default(EntityRef<PastorType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PastorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PastorID
		{
			get
			{
				return this._PastorID;
			}
			set
			{
				if ((this._PastorID != value))
				{
					this.OnPastorIDChanging(value);
					this.SendPropertyChanging();
					this._PastorID = value;
					this.SendPropertyChanged("PastorID");
					this.OnPastorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PastorTypeID", DbType="Int NOT NULL")]
		public int PastorTypeID
		{
			get
			{
				return this._PastorTypeID;
			}
			set
			{
				if ((this._PastorTypeID != value))
				{
					if (this._PastorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPastorTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PastorTypeID = value;
					this.SendPropertyChanged("PastorTypeID");
					this.OnPastorTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOrdained", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOrdained
		{
			get
			{
				return this._DateOrdained;
			}
			set
			{
				if ((this._DateOrdained != value))
				{
					this.OnDateOrdainedChanging(value);
					this.SendPropertyChanging();
					this._DateOrdained = value;
					this.SendPropertyChanged("DateOrdained");
					this.OnDateOrdainedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRetired", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateRetired
		{
			get
			{
				return this._DateRetired;
			}
			set
			{
				if ((this._DateRetired != value))
				{
					this.OnDateRetiredChanging(value);
					this.SendPropertyChanging();
					this._DateRetired = value;
					this.SendPropertyChanged("DateRetired");
					this.OnDateRetiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Pastor", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Pastors.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Pastors.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PastorType_Pastor", Storage="_PastorType", ThisKey="PastorTypeID", OtherKey="PastorTypeID", IsForeignKey=true)]
		public PastorType PastorType
		{
			get
			{
				return this._PastorType.Entity;
			}
			set
			{
				PastorType previousValue = this._PastorType.Entity;
				if (((previousValue != value) 
							|| (this._PastorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PastorType.Entity = null;
						previousValue.Pastors.Remove(this);
					}
					this._PastorType.Entity = value;
					if ((value != null))
					{
						value.Pastors.Add(this);
						this._PastorTypeID = value.PastorTypeID;
					}
					else
					{
						this._PastorTypeID = default(int);
					}
					this.SendPropertyChanged("PastorType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PastorType")]
	public partial class PastorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PastorTypeID;
		
		private string _Description;
		
		private EntitySet<Pastor> _Pastors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPastorTypeIDChanging(int value);
    partial void OnPastorTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PastorType()
		{
			this._Pastors = new EntitySet<Pastor>(new Action<Pastor>(this.attach_Pastors), new Action<Pastor>(this.detach_Pastors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PastorTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PastorTypeID
		{
			get
			{
				return this._PastorTypeID;
			}
			set
			{
				if ((this._PastorTypeID != value))
				{
					this.OnPastorTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PastorTypeID = value;
					this.SendPropertyChanged("PastorTypeID");
					this.OnPastorTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PastorType_Pastor", Storage="_Pastors", ThisKey="PastorTypeID", OtherKey="PastorTypeID")]
		public EntitySet<Pastor> Pastors
		{
			get
			{
				return this._Pastors;
			}
			set
			{
				this._Pastors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pastors(Pastor entity)
		{
			this.SendPropertyChanging();
			entity.PastorType = this;
		}
		
		private void detach_Pastors(Pastor entity)
		{
			this.SendPropertyChanging();
			entity.PastorType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Personnel")]
	public partial class Personnel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonnelID;
		
		private string _Description;
		
		private int _ChurchID;
		
		private EntitySet<PersonnelMember> _PersonnelMembers;
		
		private EntityRef<Church> _Church;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonnelIDChanging(int value);
    partial void OnPersonnelIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnChurchIDChanging(int value);
    partial void OnChurchIDChanged();
    #endregion
		
		public Personnel()
		{
			this._PersonnelMembers = new EntitySet<PersonnelMember>(new Action<PersonnelMember>(this.attach_PersonnelMembers), new Action<PersonnelMember>(this.detach_PersonnelMembers));
			this._Church = default(EntityRef<Church>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonnelID
		{
			get
			{
				return this._PersonnelID;
			}
			set
			{
				if ((this._PersonnelID != value))
				{
					this.OnPersonnelIDChanging(value);
					this.SendPropertyChanging();
					this._PersonnelID = value;
					this.SendPropertyChanged("PersonnelID");
					this.OnPersonnelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchID", DbType="Int NOT NULL")]
		public int ChurchID
		{
			get
			{
				return this._ChurchID;
			}
			set
			{
				if ((this._ChurchID != value))
				{
					if (this._Church.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChurchIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchID = value;
					this.SendPropertyChanged("ChurchID");
					this.OnChurchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personnel_PersonnelMember", Storage="_PersonnelMembers", ThisKey="PersonnelID", OtherKey="PersonnelID")]
		public EntitySet<PersonnelMember> PersonnelMembers
		{
			get
			{
				return this._PersonnelMembers;
			}
			set
			{
				this._PersonnelMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_Personnel", Storage="_Church", ThisKey="ChurchID", OtherKey="ChurchID", IsForeignKey=true)]
		public Church Church
		{
			get
			{
				return this._Church.Entity;
			}
			set
			{
				Church previousValue = this._Church.Entity;
				if (((previousValue != value) 
							|| (this._Church.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Church.Entity = null;
						previousValue.Personnels.Remove(this);
					}
					this._Church.Entity = value;
					if ((value != null))
					{
						value.Personnels.Add(this);
						this._ChurchID = value.ChurchID;
					}
					else
					{
						this._ChurchID = default(int);
					}
					this.SendPropertyChanged("Church");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonnelMembers(PersonnelMember entity)
		{
			this.SendPropertyChanging();
			entity.Personnel = this;
		}
		
		private void detach_PersonnelMembers(PersonnelMember entity)
		{
			this.SendPropertyChanging();
			entity.Personnel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonnelMember")]
	public partial class PersonnelMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonnelMemberID;
		
		private int _PersonnelID;
		
		private int _MemberID;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Personnel> _Personnel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonnelMemberIDChanging(int value);
    partial void OnPersonnelMemberIDChanged();
    partial void OnPersonnelIDChanging(int value);
    partial void OnPersonnelIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    #endregion
		
		public PersonnelMember()
		{
			this._Member = default(EntityRef<Member>);
			this._Personnel = default(EntityRef<Personnel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelMemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonnelMemberID
		{
			get
			{
				return this._PersonnelMemberID;
			}
			set
			{
				if ((this._PersonnelMemberID != value))
				{
					this.OnPersonnelMemberIDChanging(value);
					this.SendPropertyChanging();
					this._PersonnelMemberID = value;
					this.SendPropertyChanged("PersonnelMemberID");
					this.OnPersonnelMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelID", DbType="Int NOT NULL")]
		public int PersonnelID
		{
			get
			{
				return this._PersonnelID;
			}
			set
			{
				if ((this._PersonnelID != value))
				{
					if (this._Personnel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonnelIDChanging(value);
					this.SendPropertyChanging();
					this._PersonnelID = value;
					this.SendPropertyChanged("PersonnelID");
					this.OnPersonnelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_PersonnelMember", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.PersonnelMembers.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.PersonnelMembers.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personnel_PersonnelMember", Storage="_Personnel", ThisKey="PersonnelID", OtherKey="PersonnelID", IsForeignKey=true)]
		public Personnel Personnel
		{
			get
			{
				return this._Personnel.Entity;
			}
			set
			{
				Personnel previousValue = this._Personnel.Entity;
				if (((previousValue != value) 
							|| (this._Personnel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Personnel.Entity = null;
						previousValue.PersonnelMembers.Remove(this);
					}
					this._Personnel.Entity = value;
					if ((value != null))
					{
						value.PersonnelMembers.Add(this);
						this._PersonnelID = value.PersonnelID;
					}
					else
					{
						this._PersonnelID = default(int);
					}
					this.SendPropertyChanged("Personnel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceID;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private int _ChurchID;
		
		private EntitySet<Attendance> _Attendances;
		
		private EntityRef<Church> _Church;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnChurchIDChanging(int value);
    partial void OnChurchIDChanged();
    #endregion
		
		public Service()
		{
			this._Attendances = new EntitySet<Attendance>(new Action<Attendance>(this.attach_Attendances), new Action<Attendance>(this.detach_Attendances));
			this._Church = default(EntityRef<Church>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchID", DbType="Int NOT NULL")]
		public int ChurchID
		{
			get
			{
				return this._ChurchID;
			}
			set
			{
				if ((this._ChurchID != value))
				{
					if (this._Church.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChurchIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchID = value;
					this.SendPropertyChanged("ChurchID");
					this.OnChurchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Attendance", Storage="_Attendances", ThisKey="ServiceID", OtherKey="ServiceID")]
		public EntitySet<Attendance> Attendances
		{
			get
			{
				return this._Attendances;
			}
			set
			{
				this._Attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_Service", Storage="_Church", ThisKey="ChurchID", OtherKey="ChurchID", IsForeignKey=true)]
		public Church Church
		{
			get
			{
				return this._Church.Entity;
			}
			set
			{
				Church previousValue = this._Church.Entity;
				if (((previousValue != value) 
							|| (this._Church.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Church.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Church.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._ChurchID = value.ChurchID;
					}
					else
					{
						this._ChurchID = default(int);
					}
					this.SendPropertyChanged("Church");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSAttendance")]
	public partial class SSAttendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSAttendanceID;
		
		private System.Nullable<System.DateTime> _SundayDate;
		
		private int _SSClassMemberID;
		
		private bool _IsAbsent;
		
		private EntityRef<SSClassMember> _SSClassMember;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSAttendanceIDChanging(int value);
    partial void OnSSAttendanceIDChanged();
    partial void OnSundayDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSundayDateChanged();
    partial void OnSSClassMemberIDChanging(int value);
    partial void OnSSClassMemberIDChanged();
    partial void OnIsAbsentChanging(bool value);
    partial void OnIsAbsentChanged();
    #endregion
		
		public SSAttendance()
		{
			this._SSClassMember = default(EntityRef<SSClassMember>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSAttendanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSAttendanceID
		{
			get
			{
				return this._SSAttendanceID;
			}
			set
			{
				if ((this._SSAttendanceID != value))
				{
					this.OnSSAttendanceIDChanging(value);
					this.SendPropertyChanging();
					this._SSAttendanceID = value;
					this.SendPropertyChanged("SSAttendanceID");
					this.OnSSAttendanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SundayDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SundayDate
		{
			get
			{
				return this._SundayDate;
			}
			set
			{
				if ((this._SundayDate != value))
				{
					this.OnSundayDateChanging(value);
					this.SendPropertyChanging();
					this._SundayDate = value;
					this.SendPropertyChanged("SundayDate");
					this.OnSundayDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSClassMemberID", DbType="Int NOT NULL")]
		public int SSClassMemberID
		{
			get
			{
				return this._SSClassMemberID;
			}
			set
			{
				if ((this._SSClassMemberID != value))
				{
					if (this._SSClassMember.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSClassMemberIDChanging(value);
					this.SendPropertyChanging();
					this._SSClassMemberID = value;
					this.SendPropertyChanged("SSClassMemberID");
					this.OnSSClassMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAbsent", DbType="Bit NOT NULL")]
		public bool IsAbsent
		{
			get
			{
				return this._IsAbsent;
			}
			set
			{
				if ((this._IsAbsent != value))
				{
					this.OnIsAbsentChanging(value);
					this.SendPropertyChanging();
					this._IsAbsent = value;
					this.SendPropertyChanged("IsAbsent");
					this.OnIsAbsentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSClassMember_SSAttendance", Storage="_SSClassMember", ThisKey="SSClassMemberID", OtherKey="SSClassMemberID", IsForeignKey=true)]
		public SSClassMember SSClassMember
		{
			get
			{
				return this._SSClassMember.Entity;
			}
			set
			{
				SSClassMember previousValue = this._SSClassMember.Entity;
				if (((previousValue != value) 
							|| (this._SSClassMember.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSClassMember.Entity = null;
						previousValue.SSAttendances.Remove(this);
					}
					this._SSClassMember.Entity = value;
					if ((value != null))
					{
						value.SSAttendances.Add(this);
						this._SSClassMemberID = value.SSClassMemberID;
					}
					else
					{
						this._SSClassMemberID = default(int);
					}
					this.SendPropertyChanged("SSClassMember");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSClassTeacher")]
	public partial class SSClassTeacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSClassTeacherID;
		
		private int _SSClassID;
		
		private int _MemberID;
		
		private int _SSClassTeacherTypeID;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<SSClassTeacherType> _SSClassTeacherType;
		
		private EntityRef<SSClass> _SSClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSClassTeacherIDChanging(int value);
    partial void OnSSClassTeacherIDChanged();
    partial void OnSSClassIDChanging(int value);
    partial void OnSSClassIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnSSClassTeacherTypeIDChanging(int value);
    partial void OnSSClassTeacherTypeIDChanged();
    #endregion
		
		public SSClassTeacher()
		{
			this._Member = default(EntityRef<Member>);
			this._SSClassTeacherType = default(EntityRef<SSClassTeacherType>);
			this._SSClass = default(EntityRef<SSClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSClassTeacherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSClassTeacherID
		{
			get
			{
				return this._SSClassTeacherID;
			}
			set
			{
				if ((this._SSClassTeacherID != value))
				{
					this.OnSSClassTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._SSClassTeacherID = value;
					this.SendPropertyChanged("SSClassTeacherID");
					this.OnSSClassTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSClassID", DbType="Int NOT NULL")]
		public int SSClassID
		{
			get
			{
				return this._SSClassID;
			}
			set
			{
				if ((this._SSClassID != value))
				{
					if (this._SSClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSClassIDChanging(value);
					this.SendPropertyChanging();
					this._SSClassID = value;
					this.SendPropertyChanged("SSClassID");
					this.OnSSClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSClassTeacherTypeID", DbType="Int NOT NULL")]
		public int SSClassTeacherTypeID
		{
			get
			{
				return this._SSClassTeacherTypeID;
			}
			set
			{
				if ((this._SSClassTeacherTypeID != value))
				{
					if (this._SSClassTeacherType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSClassTeacherTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SSClassTeacherTypeID = value;
					this.SendPropertyChanged("SSClassTeacherTypeID");
					this.OnSSClassTeacherTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SSClassTeacher", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.SSClassTeachers.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.SSClassTeachers.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSClassTeacherType_SSClassTeacher", Storage="_SSClassTeacherType", ThisKey="SSClassTeacherTypeID", OtherKey="SSTeacherTypeID", IsForeignKey=true)]
		public SSClassTeacherType SSClassTeacherType
		{
			get
			{
				return this._SSClassTeacherType.Entity;
			}
			set
			{
				SSClassTeacherType previousValue = this._SSClassTeacherType.Entity;
				if (((previousValue != value) 
							|| (this._SSClassTeacherType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSClassTeacherType.Entity = null;
						previousValue.SSClassTeachers.Remove(this);
					}
					this._SSClassTeacherType.Entity = value;
					if ((value != null))
					{
						value.SSClassTeachers.Add(this);
						this._SSClassTeacherTypeID = value.SSTeacherTypeID;
					}
					else
					{
						this._SSClassTeacherTypeID = default(int);
					}
					this.SendPropertyChanged("SSClassTeacherType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSClass_SSClassTeacher", Storage="_SSClass", ThisKey="SSClassID", OtherKey="SSClassID", IsForeignKey=true)]
		public SSClass SSClass
		{
			get
			{
				return this._SSClass.Entity;
			}
			set
			{
				SSClass previousValue = this._SSClass.Entity;
				if (((previousValue != value) 
							|| (this._SSClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSClass.Entity = null;
						previousValue.SSClassTeachers.Remove(this);
					}
					this._SSClass.Entity = value;
					if ((value != null))
					{
						value.SSClassTeachers.Add(this);
						this._SSClassID = value.SSClassID;
					}
					else
					{
						this._SSClassID = default(int);
					}
					this.SendPropertyChanged("SSClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSClassTeacherType")]
	public partial class SSClassTeacherType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSTeacherTypeID;
		
		private string _Description;
		
		private EntitySet<SSClassTeacher> _SSClassTeachers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSTeacherTypeIDChanging(int value);
    partial void OnSSTeacherTypeIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SSClassTeacherType()
		{
			this._SSClassTeachers = new EntitySet<SSClassTeacher>(new Action<SSClassTeacher>(this.attach_SSClassTeachers), new Action<SSClassTeacher>(this.detach_SSClassTeachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSTeacherTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSTeacherTypeID
		{
			get
			{
				return this._SSTeacherTypeID;
			}
			set
			{
				if ((this._SSTeacherTypeID != value))
				{
					this.OnSSTeacherTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SSTeacherTypeID = value;
					this.SendPropertyChanged("SSTeacherTypeID");
					this.OnSSTeacherTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSClassTeacherType_SSClassTeacher", Storage="_SSClassTeachers", ThisKey="SSTeacherTypeID", OtherKey="SSClassTeacherTypeID")]
		public EntitySet<SSClassTeacher> SSClassTeachers
		{
			get
			{
				return this._SSClassTeachers;
			}
			set
			{
				this._SSClassTeachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SSClassTeachers(SSClassTeacher entity)
		{
			this.SendPropertyChanging();
			entity.SSClassTeacherType = this;
		}
		
		private void detach_SSClassTeachers(SSClassTeacher entity)
		{
			this.SendPropertyChanging();
			entity.SSClassTeacherType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSClass")]
	public partial class SSClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSClassID;
		
		private string _ShortDescription;
		
		private string _LongDescription;
		
		private System.Nullable<System.DateTime> _DateFormed;
		
		private int _ChurchID;
		
		private EntitySet<SSClassTeacher> _SSClassTeachers;
		
		private EntitySet<SSClassMember> _SSClassMembers;
		
		private EntityRef<Church> _Church;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSClassIDChanging(int value);
    partial void OnSSClassIDChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnDateFormedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFormedChanged();
    partial void OnChurchIDChanging(int value);
    partial void OnChurchIDChanged();
    #endregion
		
		public SSClass()
		{
			this._SSClassTeachers = new EntitySet<SSClassTeacher>(new Action<SSClassTeacher>(this.attach_SSClassTeachers), new Action<SSClassTeacher>(this.detach_SSClassTeachers));
			this._SSClassMembers = new EntitySet<SSClassMember>(new Action<SSClassMember>(this.attach_SSClassMembers), new Action<SSClassMember>(this.detach_SSClassMembers));
			this._Church = default(EntityRef<Church>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSClassID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSClassID
		{
			get
			{
				return this._SSClassID;
			}
			set
			{
				if ((this._SSClassID != value))
				{
					this.OnSSClassIDChanging(value);
					this.SendPropertyChanging();
					this._SSClassID = value;
					this.SendPropertyChanged("SSClassID");
					this.OnSSClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="VarChar(50)")]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="VarChar(255)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFormed", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateFormed
		{
			get
			{
				return this._DateFormed;
			}
			set
			{
				if ((this._DateFormed != value))
				{
					this.OnDateFormedChanging(value);
					this.SendPropertyChanging();
					this._DateFormed = value;
					this.SendPropertyChanged("DateFormed");
					this.OnDateFormedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchID", DbType="Int NOT NULL")]
		public int ChurchID
		{
			get
			{
				return this._ChurchID;
			}
			set
			{
				if ((this._ChurchID != value))
				{
					if (this._Church.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChurchIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchID = value;
					this.SendPropertyChanged("ChurchID");
					this.OnChurchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSClass_SSClassTeacher", Storage="_SSClassTeachers", ThisKey="SSClassID", OtherKey="SSClassID")]
		public EntitySet<SSClassTeacher> SSClassTeachers
		{
			get
			{
				return this._SSClassTeachers;
			}
			set
			{
				this._SSClassTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSClass_SSClassMember", Storage="_SSClassMembers", ThisKey="SSClassID", OtherKey="SSClassID")]
		public EntitySet<SSClassMember> SSClassMembers
		{
			get
			{
				return this._SSClassMembers;
			}
			set
			{
				this._SSClassMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Church_SSClass", Storage="_Church", ThisKey="ChurchID", OtherKey="ChurchID", IsForeignKey=true)]
		public Church Church
		{
			get
			{
				return this._Church.Entity;
			}
			set
			{
				Church previousValue = this._Church.Entity;
				if (((previousValue != value) 
							|| (this._Church.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Church.Entity = null;
						previousValue.SSClasses.Remove(this);
					}
					this._Church.Entity = value;
					if ((value != null))
					{
						value.SSClasses.Add(this);
						this._ChurchID = value.ChurchID;
					}
					else
					{
						this._ChurchID = default(int);
					}
					this.SendPropertyChanged("Church");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SSClassTeachers(SSClassTeacher entity)
		{
			this.SendPropertyChanging();
			entity.SSClass = this;
		}
		
		private void detach_SSClassTeachers(SSClassTeacher entity)
		{
			this.SendPropertyChanging();
			entity.SSClass = null;
		}
		
		private void attach_SSClassMembers(SSClassMember entity)
		{
			this.SendPropertyChanging();
			entity.SSClass = this;
		}
		
		private void detach_SSClassMembers(SSClassMember entity)
		{
			this.SendPropertyChanging();
			entity.SSClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SSClassMember")]
	public partial class SSClassMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSClassMemberID;
		
		private int _SSClassID;
		
		private int _MemberID;
		
		private EntitySet<SSAttendance> _SSAttendances;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<SSClass> _SSClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSClassMemberIDChanging(int value);
    partial void OnSSClassMemberIDChanged();
    partial void OnSSClassIDChanging(int value);
    partial void OnSSClassIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    #endregion
		
		public SSClassMember()
		{
			this._SSAttendances = new EntitySet<SSAttendance>(new Action<SSAttendance>(this.attach_SSAttendances), new Action<SSAttendance>(this.detach_SSAttendances));
			this._Member = default(EntityRef<Member>);
			this._SSClass = default(EntityRef<SSClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSClassMemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SSClassMemberID
		{
			get
			{
				return this._SSClassMemberID;
			}
			set
			{
				if ((this._SSClassMemberID != value))
				{
					this.OnSSClassMemberIDChanging(value);
					this.SendPropertyChanging();
					this._SSClassMemberID = value;
					this.SendPropertyChanged("SSClassMemberID");
					this.OnSSClassMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSClassID", DbType="Int NOT NULL")]
		public int SSClassID
		{
			get
			{
				return this._SSClassID;
			}
			set
			{
				if ((this._SSClassID != value))
				{
					if (this._SSClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSSClassIDChanging(value);
					this.SendPropertyChanging();
					this._SSClassID = value;
					this.SendPropertyChanged("SSClassID");
					this.OnSSClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSClassMember_SSAttendance", Storage="_SSAttendances", ThisKey="SSClassMemberID", OtherKey="SSClassMemberID")]
		public EntitySet<SSAttendance> SSAttendances
		{
			get
			{
				return this._SSAttendances;
			}
			set
			{
				this._SSAttendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SSClassMember", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.SSClassMembers.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.SSClassMembers.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SSClass_SSClassMember", Storage="_SSClass", ThisKey="SSClassID", OtherKey="SSClassID", IsForeignKey=true)]
		public SSClass SSClass
		{
			get
			{
				return this._SSClass.Entity;
			}
			set
			{
				SSClass previousValue = this._SSClass.Entity;
				if (((previousValue != value) 
							|| (this._SSClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SSClass.Entity = null;
						previousValue.SSClassMembers.Remove(this);
					}
					this._SSClass.Entity = value;
					if ((value != null))
					{
						value.SSClassMembers.Add(this);
						this._SSClassID = value.SSClassID;
					}
					else
					{
						this._SSClassID = default(int);
					}
					this.SendPropertyChanged("SSClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SSAttendances(SSAttendance entity)
		{
			this.SendPropertyChanging();
			entity.SSClassMember = this;
		}
		
		private void detach_SSAttendances(SSAttendance entity)
		{
			this.SendPropertyChanging();
			entity.SSClassMember = null;
		}
	}
}
#pragma warning restore 1591
